# -*- coding: utf-8 -*-
"""London_crime_data.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ArdfEtNptt7kRqm8DgSFUyMYEuXCng75

# London Crime Data Analysis


*  Download the Data 
*  Structure the relevant data
* Visualise the data 
* Deploy a Classifying ML Algorithm

# Downlaod the data
* Downloading two Databases 
* One database is from Kaggle called the Londo_crime
* The other is a downloaded file from the london DataStore
"""

from google.colab import auth
auth.authenticate_user()
print('Authenticated')

import os
import numpy as np
import pandas as pd
import pandas_gbq

from google.cloud import bigquery


sql = """
    SELECT *
    FROM `bigquery-public-data.london_crime.crime_by_lsoa`
    
    
    
    
    
    
    
    
    
    
"""

# Run a Standard SQL query using the environment's default project


# Run a Standard SQL query with the project set explicitly
project_id = 'london-crime-data-251117'
df = pd.read_gbq(sql, project_id=project_id, dialect='standard')

from google.colab import files
uploaded = files.upload()

import io

df2 = pd.read_csv(io.BytesIO(uploaded['bbox.csv']))

uploaded = files.upload()

rankings = pd.read_csv('Rankings.csv')

df=df.merge(rankings, left_on = 'major_category', right_on = 'major_category')
df.head()

df2.head() 
#Data taken from London DataStore

df.head()
#Data taken from Kaggle

"""# Structure the relevant data
* Use data from Kaggle and DataStore to convert lsoa_code to Latitude and Longitude
* Create a new DataFrame that containes the features and lables used to train the model
"""

t=df['lsoa_code'].unique()
#Finds all the unique 'lsoa_code'

lsoa_to_latlong = pd.DataFrame([])
for i in t:
  temp=df2[df2['lsoa'] == i].head(1)
  sel = ['lsoa','Latitude','Longitude']
  a = temp[sel]
  lsoa_to_latlong=lsoa_to_latlong.append(a)
# Searches the DataStore database for the same Lsoa_code
# Reads the relevent Latitude and Longitude Data 
# saves it a new dataframe

lsoa_to_latlong.head()

df=df.merge(lsoa_to_latlong, left_on='lsoa_code', right_on='lsoa')
df.head()

len(df)

df.major_category = pd.Categorical(df.major_category)
df['major_category code'] = df.major_category.cat.codes

#Creates Codes for categories so they can be computed in a variety of ML 
#algorithms

"""#Visualise the data
* As this is a classifying problem a scatter plot must be seen.
* However other graphs can be useful for a better understanding of the data.
* Such as  "How crime is split among the boroughs?"
* Or 'How crime is split in a particular borough at a certain time?"
"""

# Commented out IPython magic to ensure Python compatibility.
import matplotlib.pyplot as plt
def get_year(d,year):
  year = pd.DataFrame(d[d['year'] == year])
  return year

def get_borough(borough):
  borough = (df[df['borough'] == borough])
  return borough

def get_minor_category(minor_category):
  minor_category = pd.DataFrame(df[df['minor_category'] == minor_category])
  return minor_category
  
  
def Tally(d,category):
  dups_category = d.pivot_table(index=[category] ,aggfunc='size')
  return dups_category

# %matplotlib inline

plt.figure(figsize=[10,10])
array= df['borough'].unique()
lis = array.tolist()
lis.sort()
info=Tally(df,"borough")
plt.bar(lis,info)
plt.xlabel('Borough')
plt.ylabel('No. of Crimes')
plt.title('"How crime is split among the boroughs"')
plt.xticks(rotation=90)
plt.show

data=get_borough("Croydon")
d=Tally(data,'major_category')
a= df['major_category'].unique()
b = a.tolist()
b.sort()
plt.figure(figsize=[10,10])
plt.pie(d,labels=b[0:len(d)],autopct='%1.2f',startangle=90)
plt.axis('equal')
plt.title("How crime is split in Croydon")
plt.show

data.head()

import seaborn as sb

  
  
label = data['ViCrime']
fet = ["Latitude_x","Longitude_x","year"]
x = data[fet].values
x = np.array(x)
lat= x[:,0]
lon=x[:,1]
year =x[:,2]

sb.scatterplot(lat,lon ,hue = label)
plt.legend(bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.)
plt.title("GPS map of Croydon")
plt.xlabel("Latitude")
plt.ylabel("Longitude")
plt.show

= data['Latitude_x'].unique()
len(a)